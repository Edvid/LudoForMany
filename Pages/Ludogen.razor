@page "/"
@inject HttpClient Http

<PageTitle>Ludo Generator</PageTitle>

<h1>Ludo Generator</h1>

<p>Put in a number of players, and a board will be generated</p>

<input type="number" @bind="number"><br><br>

@if (number <= 2)
{
    <p><em>Insert a number larger than 2...</em></p>
}
else
{
    <svg width=@imageSize height=@imageSize xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        @for (int i = 0; i < number; i++)
            {
                double x1 = Math.Sin(i*2*Math.PI/number);
                double y1 = Math.Cos(i*2*Math.PI/number);

                double x2 = Math.Sin((i+1)*2*Math.PI/number);
                double y2 = Math.Cos((i+1)*2*Math.PI/number);

                if(i == 0){
                    double circleFraction = Math.Sqrt(Math.Pow(x1 - x2, 2) + Math.Pow(y1 - y2, 2));
                    double armLength = circleFraction * 3.5;
                    double circleRatio = 1.0/(1.0 + armLength);
                    circleSize = circleRatio * imageSize/2.0;
                }

                x1 *= circleSize;
                y1 *= circleSize;
                x2 *= circleSize;
                y2 *= circleSize;
                sidelength = Math.Sqrt(Math.Pow(x1 - x2, 2) + Math.Pow(y1 - y2, 2));

                double offset = imageSize/2;
 
                x1 += offset;
                y1 += offset;
                x2 += offset;
                y2 += offset;

                string points = 
                offset.ToString().Replace(",", ".") + "," + offset.ToString().Replace(",", ".") + " " + 
                x1.ToString().Replace(",", ".")  + "," + y1.ToString().Replace(",", ".") + " " + 
                x2.ToString().Replace(",", ".")  + "," + y2.ToString().Replace(",", ".") + " " + 
                offset.ToString().Replace(",", ".") + "," + offset.ToString().Replace(",", ".");
                
                <polygon points=@points style="fill:@colors[i % colors.Length];stroke:black;stroke-width:1"/>

                double cellX = (x1 - x2) / 3;
                double cellY = (y1 - y2) / 3; 

                for(int j = 0; j < 9; j++){
                    for(int k = 0; k < 3; k++){
                        
                        points = 
                        (x2+k*cellX+j*cellY).ToString().Replace(",", ".") + "," + (y2+k*cellY+j*-cellX).ToString().Replace(",", ".") + " " + 
                        (x2+(k+1)*cellX+j*cellY).ToString().Replace(",", ".") + "," + (y2+(k+1)*cellY+j*-cellX).ToString().Replace(",", ".") + " " + 
                        (x2+(k+1)*cellX+(j+1)*cellY).ToString().Replace(",", ".") + "," + (y2+(k+1)*cellY+(j+1)*-cellX).ToString().Replace(",", ".") + " " + 
                        (x2+k*cellX+(j+1)*cellY).ToString().Replace(",", ".") + "," + (y2+k*cellY+(j+1)*-cellX).ToString().Replace(",", ".");
                        
                        if(j < 6){
                            if((k == 1 && j!=5) || (k == 2 && j == 4)){
                            <polygon points=@points style="fill:@colors[i % colors.Length];stroke:black;stroke-width:1"/>
                            }else{
                                <polygon points=@points style="fill:white;stroke:black;stroke-width:1"/>
                            }
                            double ics = (sidelength / 5.0);
                            string insideX = ((x2+(k+0.5)*cellX+(j+0.5)*cellY)-ics/2.0).ToString().Replace(",", ".");
                            string insideY = ((y2+(k+0.5)*cellY+(j+0.5)*-cellX)-ics/2.0).ToString().Replace(",", ".");
                            string iconSize = ics.ToString().Replace(",", ".");
                            
                            if((k == 2 && j == 4) || (k == 0 && j == 3)){ @* Globe *@
                                <image href="images/Simple_Globe.svg" x="@(insideX)" y="@insideY" width=@iconSize height=@iconSize></image>
                            }else if((k == 0 && j == 0) || (k == 1 && j == 5)){ @* star *@
                                <image href="images/star_pictogram.png" x="@insideX" y="@insideY" width=@iconSize height=@iconSize></image>
                            }
                        }else if(k % 2 == 0 && j % 2 == 0){
                            double insideX = (x2+(k+0.5)*cellX+(j+1)*cellY);
                            double insideY = (y2+(k+0.5)*cellY+(j+1)*-cellX);
                            double radius = sidelength/6;

                            <circle cx=@insideX.ToString().Replace(",", ".") cy=@insideY.ToString().Replace(",", ".") r=@radius.ToString().Replace(",", ".") style="fill:@colors[i % colors.Length];stroke:black;stroke-width:1"/>
                        }

                        
                    }
                }
                double insidex = (x2+1.5*cellX-1*cellY);
                double insidey = (y2+1.5*cellY-1*-cellX);
                
                if(colors.Length >= number) continue;

                int shapeType = i/colors.Length;
                double[] rpoints = {};
                points = "";
                double scalar = 1;

                switch (shapeType % shapeCount)
                {
                    case 1:                        
                        rpoints = new double[] {
                            Math.Sin(0.5*2*Math.PI/4), -Math.Cos(0.5*2*Math.PI/4), 
                            Math.Sin(1.5*2*Math.PI/4), -Math.Cos(1.5*2*Math.PI/4), 
                            Math.Sin(2.5*2*Math.PI/4), -Math.Cos(2.5*2*Math.PI/4),
                            Math.Sin(3.5*2*Math.PI/4), -Math.Cos(3.5*2*Math.PI/4)
                            };
                        scalar = 5;

                        break;
                    case 2:                
                        rpoints = new double[] {
                            Math.Cos(0*2*Math.PI/6), -Math.Sin(0*2*Math.PI/6),
                            Math.Cos(1*2*Math.PI/6), -Math.Sin(1*2*Math.PI/6),
                            Math.Cos(2*2*Math.PI/6), -Math.Sin(2*2*Math.PI/6),
                            Math.Cos(3*2*Math.PI/6), -Math.Sin(3*2*Math.PI/6),
                            Math.Cos(4*2*Math.PI/6), -Math.Sin(4*2*Math.PI/6),
                            Math.Cos(5*2*Math.PI/6), -Math.Sin(5*2*Math.PI/6)
                        };
                        scalar = 5;
                        break;
                    case 3:
                        rpoints = new double[] {
                            Math.Sin(0*2*Math.PI/5), -Math.Cos(0*2*Math.PI/5),
                            Math.Sin(0.5*2*Math.PI/5)/1.5, -Math.Cos(0.5*2*Math.PI/5)/1.5,
                            Math.Sin(1*2*Math.PI/5), -Math.Cos(1*2*Math.PI/5),
                            Math.Sin(1.5*2*Math.PI/5)/1.5, -Math.Cos(1.5*2*Math.PI/5)/1.5,
                            Math.Sin(2*2*Math.PI/5), -Math.Cos(2*2*Math.PI/5),
                            Math.Sin(2.5*2*Math.PI/5)/1.5, -Math.Cos(2.5*2*Math.PI/5)/1.5,
                            Math.Sin(3*2*Math.PI/5), -Math.Cos(3*2*Math.PI/5),
                            Math.Sin(3.5*2*Math.PI/5)/1.5, -Math.Cos(3.5*2*Math.PI/5)/1.5,
                            Math.Sin(4*2*Math.PI/5), -Math.Cos(4*2*Math.PI/5),
                            Math.Sin(4.5*2*Math.PI/5)/1.5, -Math.Cos(4.5*2*Math.PI/5)/1.5
                        };
                        scalar = 5;
                        break;
                    case 4:
                        rpoints = new double[] {-1, 3, 1, 3, 1, 1, 3, 1, 3, -1, 1, -1, 1, -3, -1, -3, -1, -1, -3, -1, -3, 1, -1, 1};
                        scalar = 15;
                        break;
                    case 5:
                        rpoints = new double[] {-1.5, -1.5, 1.5, -1.5, 1.5, -0.5, 0.5, -0.5, 0.5, 1.5, -0.5, 1.5, -0.5, -0.5, -1.5, -0.5};
                        scalar = 10;
                        break;
                    case 6:
                        rpoints = new double[] {-0.75, -1.5, 0.75, -1.5, 1.5, -1, 0, 1.25, -1.5, -1};
                        scalar = 10;
                        break;
                    case 7:
                        double sqrt2 = Math.Sqrt(2);
                        rpoints = new double[] {
                            -sqrt2/1.5, -sqrt2,
                            sqrt2/1.5, -sqrt2,
                            sqrt2/8, 0,
                            sqrt2/1.5, sqrt2, 
                            -sqrt2/1.5, sqrt2,
                            -sqrt2/8, 0
                            };
                        scalar = 10;
                        break;
                    case 8:
                        rpoints = new double[] {0, -1, 1, -2, 2, -1, 0, 1.5, -2, -1, -1, -2};
                        scalar = 10;
                        break;
                    case 9:
                        rpoints = new double[] {0, -4, 1.5, -2.5, 0.5, -2.5, 2.25, -0.5, 1, -0.5, 3, 2, 1, 2, 1, 5, -1, 5, -1, 2, -3, 2, -1, -0.5, -2.25, -0.5, -0.5, -2.5, -1.5, -2.5};
                        scalar = 20;
                        break;
                    case 10:
                        rpoints = new double[] {0, -3, -0.25, -0.5, 2, -0.5, 0, 3, 0.25, 0.5, -2, 0.5};
                        scalar = 15;
                        break;
                    case 11:
                        rpoints = new double[] {0, -1, 1, 0, 3, -2, 2, 2, -2, 2, -3, -2, -1, 0};
                        scalar = 15;
                        break;
                    case 12:
                        rpoints = new double[] {0, -2, 2, -1, 0, 2, -2, -1};
                        scalar = 15;
                        break;
                    case 13:
                        rpoints = new double[] {1, 0, 2, -2, 2, 2, -2, 2, -2, -2, -1, 0};
                        scalar = 15;
                        break;
                    case 14:
                        rpoints = new double[] {0, -1, 2, -2, 2, 1, 0, 2, -2, 1, -2, -2};
                        scalar = 15;
                        break;
                    case 15:
                        
                        rpoints = new double[] {-1, -3, 2, -0.5, 4, -3, 3, 0, 4, 3, 2, 0.5, -1, 3, -4, 0};
                        scalar = 25;
                        break;
                    default: 
                        rpoints = new double[] {
                            Math.Sin(0*2*Math.PI/3), -Math.Cos(0*2*Math.PI/3), 
                            Math.Sin(1*2*Math.PI/3), -Math.Cos(1*2*Math.PI/3), 
                            Math.Sin(2*2*Math.PI/3), -Math.Cos(2*2*Math.PI/3)
                            };
                        scalar = 5; 
                    break;
                }
                
                for(int j = 0; j < rpoints.Length; j+=2){
                    if(j != 0) points += " ";
                    points += (insidex+rpoints[j]*sidelength/scalar).ToString().Replace(",", ".") + "," + (insidey+rpoints[j+1]*sidelength/scalar).ToString().Replace(",", ".");
                }
                
                if(number <= colors.Length*shapeCount  || i/(colors.Length*shapeCount) == i % colors.Length){
                    <polygon points=@points style="fill:black;"/>
                }else{
                    <polygon points=@points style="fill:@colors[i/(colors.Length*shapeCount)];"/>
                }
            }        
    </svg>
}

@code {
    private int number {get;set;}
    double sidelength = 0;
    double imageSize = 4000;
    double circleSize = 1;

    private string[] colors = {
        "blue",
        "Firebrick",
        "lime",
        "BlueViolet",
        "HotPink",
        "DodgerBlue",
        "Silver",
        "SaddleBrown"
    };
    int shapeCount = 16;
}
